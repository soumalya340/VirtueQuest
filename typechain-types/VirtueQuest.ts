/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VirtueQuestInterface extends utils.Interface {
  contractName: "VirtueQuest";
  functions: {
    "contractAddress()": FunctionFragment;
    "diceRolling(uint256)": FunctionFragment;
    "getPlayerPosition(uint256)": FunctionFragment;
    "isGameActive(uint256)": FunctionFragment;
    "play(uint256)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "setNFTContract(address)": FunctionFragment;
    "startGame(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "diceRolling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "play", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diceRolling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;

  events: {
    "DiceLanded(uint256,uint256,uint256)": EventFragment;
    "DiceRolled(uint256,address,uint256)": EventFragment;
    "GameStarted(uint256,address)": EventFragment;
    "GameWon(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiceLanded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiceRolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameWon"): EventFragment;
}

export type DiceLandedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { requestId: BigNumber; result: BigNumber; gameId: BigNumber }
>;

export type DiceLandedEventFilter = TypedEventFilter<DiceLandedEvent>;

export type DiceRolledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { requestId: BigNumber; roller: string; gameId: BigNumber }
>;

export type DiceRolledEventFilter = TypedEventFilter<DiceRolledEvent>;

export type GameStartedEvent = TypedEvent<
  [BigNumber, string],
  { gameId: BigNumber; player: string }
>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export type GameWonEvent = TypedEvent<
  [BigNumber, string],
  { gameId: BigNumber; winner: string }
>;

export type GameWonEventFilter = TypedEventFilter<GameWonEvent>;

export interface VirtueQuest extends BaseContract {
  contractName: "VirtueQuest";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VirtueQuestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    diceRolling(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPlayerPosition(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isGameActive(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    play(
      gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTContract(
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startGame(
      gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  contractAddress(overrides?: CallOverrides): Promise<string>;

  diceRolling(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getPlayerPosition(
    gameId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isGameActive(
    gameId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  play(
    gameId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTContract(
    _nftContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startGame(
    gameId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contractAddress(overrides?: CallOverrides): Promise<string>;

    diceRolling(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPlayerPosition(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGameActive(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    play(gameId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTContract(
      _nftContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startGame(gameId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DiceLanded(uint256,uint256,uint256)"(
      requestId?: BigNumberish | null,
      result?: BigNumberish | null,
      gameId?: BigNumberish | null
    ): DiceLandedEventFilter;
    DiceLanded(
      requestId?: BigNumberish | null,
      result?: BigNumberish | null,
      gameId?: BigNumberish | null
    ): DiceLandedEventFilter;

    "DiceRolled(uint256,address,uint256)"(
      requestId?: BigNumberish | null,
      roller?: string | null,
      gameId?: BigNumberish | null
    ): DiceRolledEventFilter;
    DiceRolled(
      requestId?: BigNumberish | null,
      roller?: string | null,
      gameId?: BigNumberish | null
    ): DiceRolledEventFilter;

    "GameStarted(uint256,address)"(
      gameId?: null,
      player?: string | null
    ): GameStartedEventFilter;
    GameStarted(gameId?: null, player?: string | null): GameStartedEventFilter;

    "GameWon(uint256,address)"(
      gameId?: null,
      winner?: string | null
    ): GameWonEventFilter;
    GameWon(gameId?: null, winner?: string | null): GameWonEventFilter;
  };

  estimateGas: {
    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    diceRolling(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerPosition(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGameActive(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    play(
      gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTContract(
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startGame(
      gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    diceRolling(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerPosition(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGameActive(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    play(
      gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTContract(
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
